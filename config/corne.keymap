/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        td_period: td_period {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PERIOD";
            #binding-cells = <0>;
            tapping-term-ms = <190>;
            bindings = <&kp SPACE>, <&kp PERIOD>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        shift: with_lshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        numpad {
            bindings = <&tog 3>;
            key-positions = <29 38>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <25 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&mt ESC TAB       &kp Q  &kp W  &kp F                   &kp P  &kp B         &kp J                      &kp L  &kp U              &kp Y    &kp SEMI  &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp R  &kp S                   &kp T  &kp G         &kp M                      &kp N  &kp E              &kp I    &kp O     &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C                   &kp D  &kp V         &kp K                      &kp H  &kp COMMA          &kp DOT  &kp FSLH  &kp KP_ENTER
                                &mt LEFT_GUI BACKSPACE  &mo 1  &td_period    &mt RIGHT_SHIFT BACKSPACE  &mo 2  &mt RIGHT_ALT DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&trans      &bt BT_NXT           &kp HOME       &kp UP            &kp END       &kp PG_UP        &kp PLUS   &kp N7  &kp N8    &kp N9  &kp ASTERISK  &kp BSPC
&bt BT_CLR  &bt BT_PRV           &kp LEFT       &kp DOWN          &kp RIGHT     &kp PG_DN        &kp MINUS  &kp N4  &kp N5    &kp N6  &kp SLASH     &trans
&trans      &kp LC(PRINTSCREEN)  &kp LG(LS(S))  &kp LS(LG(LEFT))  &kp LG(LEFT)  &kp LG(RIGHT)    &kp N0     &kp N1  &kp N2    &kp N3  &kp DOT       &trans
                                                &trans            &trans        &trans           &trans     &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN     &kp POUND             &kp CARET              &none        &kp PLUS      &kp N7        &kp N8    &kp N9  &kp STAR  &kp BSPC
&trans  &kp PERCENT      &kp AMPERSAND   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none        &kp KP_MINUS  &kp N4        &kp N5    &kp N6  &kp FSLH  &kp EQUAL
&trans  &kp DOLLAR       &kp UNDERSCORE  &kp LBKT              &kp RBKT               &none        &kp NUMBER_0  &kp NUMBER_1  &kp N2    &kp N3  &kp DOT   &kp RET
                                         &kp LGUI              &trans                 &kp SPACE    &kp RET       &trans        &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp PLUS   &kp N7  &kp N8  &kp N9  &kp STAR    &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH    &kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans
&trans  &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT     &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans
                           &trans  &trans  &to 0       &trans  &trans   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
